/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jmr.application;

import com.sun.jna.Native;

import com.sun.jna.NativeLibrary;
import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import javafx.scene.control.RadioButton;
import javax.media.CannotRealizeException;
import javax.media.NoPlayerException;
import javax.swing.JFrame;
import javax.swing.JPanel;
import uk.co.caprica.vlcj.binding.LibVlc;
import uk.co.caprica.vlcj.component.EmbeddedMediaListPlayerComponent;

import uk.co.caprica.vlcj.player.MediaPlayerFactory;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;
import uk.co.caprica.vlcj.component.EmbeddedMediaPlayerComponent;
import uk.co.caprica.vlcj.player.embedded.videosurface.CanvasVideoSurface;
import uk.co.caprica.vlcj.runtime.RuntimeUtil;
import javax.swing.ImageIcon;
import javax.swing.event.InternalFrameEvent;
import jmr.video.KeyFrameDescriptor;
import jmr.video.VideoIterator;
import org.bytedeco.javacv.FrameGrabber;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;
import videomedia.SegmentationOp;


/**
 * Ventana de reproducción de vídeo
 * @author Juan Jesús Tomás Rojas
 * @version 1.0 - Mayo de 2017
 */
public class VideoInternalFrame extends javax.swing.JInternalFrame {

    /**
     * Reproductor
     */
    private EmbeddedMediaPlayer mediaPlayer;
    /**
     * Fichero de vídeo asociado a la ventana
     */
    private File file;
    /**
     * Canvas en el que se muestra el vídeo
     */
    private Canvas canvas;   
    
    /**
     * Enlace la ventana que contiene a esta
     */
    private JMRFrame padre;
    
    /**
     * Indica si se está reproduciendo
     */
    private boolean playing;
    

    
    /**
     * Descriptor del vídeo usado para su comparación
     */
    
    private KeyFrameDescriptor keyFrameDescriptor;
    
    /**
     * Operador de iteración y segmentación
     */
    private VideoIterator videoIterator;
    
    /**
     * Creates new form VideoInternalFrame
     * @param f Archivo a partir el cual se crea el vídeo
     * @param pad Componente padre
     */
    public VideoInternalFrame(File f, JMRFrame pad) {
        initComponents();
        
        canvas = new Canvas();        
        canvas.setBackground(Color.black);
        this.add(canvas, BorderLayout.CENTER);
        MediaPlayerFactory mpf = new MediaPlayerFactory();
        mediaPlayer = mpf.newEmbeddedMediaPlayer();
        CanvasVideoSurface cvs = mpf.newVideoSurface(canvas);
        mediaPlayer.setVideoSurface(cvs);
        mediaPlayer.getPosition();
        mediaPlayer.getTime();
        mediaPlayer.setPlaySubItems(true);     
        padre = pad;               
        file = f;      
        playing = false;
        keyFrameDescriptor = null;
        videoIterator = null;
    }
    
    /**
     * Inicializa la ventana y su reproductor
     */
    public void startPlaying(){       
        //mediaPlayer.prepareMedia(file.toString());
        mediaPlayer.startMedia(file.toString(), "");
        mediaPlayer.pause(); //This way the first frame is loaded instead a black screen
        mediaPlayer.addMediaPlayerEventListener(new MediaPlayerEventAdapter() {
            @Override
            public void finished(MediaPlayer mediaPlayer) {
                playing = false;
                padre.getBotonPlay().setSelected(false);
            }
        });       
        this.setSize(400,400); //Elegir valor adecuado
        
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Reproduce el vídeo
     */
    public void play(){
        mediaPlayer.play();
        playing = true;
    }
    
    /**
     * Pausa el vídeo
     */
    public void pause(){
        mediaPlayer.pause();
        playing = false;
    }
    
    /**
     * Reinicia el vídeo desde el principio
     */
    public void rewind(){
        mediaPlayer.setPosition(0);
    }
    
    /**
     * Devuelve un booleano que es true cuando el vídeo se está reproduciendo
     * @return Booleano que es true cuando el vídeo se está reproduciendo
     */
    public boolean isPlaying(){
        return playing;
    }
    
    /**
     * Evento que se genera cuando se realiza un cambio en la ventana
     * @param id Identificador del evento
     */
    @Override
    protected void fireInternalFrameEvent(int id){
        super.fireInternalFrameEvent(id);
        if (id == InternalFrameEvent.INTERNAL_FRAME_ACTIVATED){ //Se ha activado la ventana
            padre.enableVideoTools(true);
            padre.getBotonPlay().setSelected(playing);
            padre.checkVideosActivos();
            padre.enableSegmentationTools(true);
        }else if(id == InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED){ //Se ha desactivado
            padre.enableVideoTools(false);
            padre.getBotonPlay().setSelected(false);
            padre.checkVideosActivos();
            padre.enableSegmentationTools(false);
        }
    }
    
    /**
     * Devuelve el archivo asociado a la ventana
     * @return Archivo asociado a la ventana
     */
    public File getFile(){
        return file;
    }
    
    /**
     * Devuelve el reproductor asociado a la ventana
     * @return Reproductor asociado a la ventana
     */
    public EmbeddedMediaPlayer getPlayer(){
        return mediaPlayer;
    }
    
    /**
     * Prepara el descriptor de keyframe para su posterior uso
     * @throws NoSuchMethodException
     * @throws org.bytedeco.javacv.FrameGrabber.Exception 
     * @throws javax.media.NoPlayerException 
     * @throws javax.media.CannotRealizeException 
     */
    public void preLoad() throws NoSuchMethodException, FrameGrabber.Exception, IOException, NoPlayerException, CannotRealizeException{
        if(keyFrameDescriptor==null){ //No se ha precargado el vídeo
            videoIterator = padre.createSegmentationOp(file, false);
            Class descriptor = padre.getDescriptorUnico();
            keyFrameDescriptor = new KeyFrameDescriptor(videoIterator.getVideo(), videoIterator, descriptor);            
        }
        keyFrameDescriptor.setComparator(padre.createSelectedComparator());
    }
    
    /**
     * Devuelve el descriptor de keyframe asociado a la ventana
     * @return Descriptor de keyframe asociado a la ventana
     */
    public KeyFrameDescriptor getKeyFrameDescriptor(){
        return keyFrameDescriptor;
    }
    
    /**
     * Devuelve el iterador de vídeo asociado a la ventana
     * @return Iterador de vídeo asociado a la ventana
     */
    public VideoIterator getVideoIterator(){
        return videoIterator;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
